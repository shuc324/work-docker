<?php
/**
 * Simple Mysql Database class
 *
 * @package default
 */
class Mysqldb {
	# --- Variables ---
	var $mysql_host;
	var $mysql_user;
	var $mysql_pass;
	var $mysql_db;
	var $encoding;
	var $link;
	var $logger = null;
	/**
	 * Contains the Database Connection Status
	 * @access var
	 * @var string
	 */
	var $status;
	/**
	 * Sets whether or not to turn Debuggin on
	 * @access var
	 * @var string
	 */
	var $debug;
	# --- Functions ---

	/**
	 * Constructor sets up {$mysql_host, $mysql_user, $mysql_pass, $mysql_db, $debug}
	 *
	 * @param string $mysql_host
	 * @param string $mysql_user
	 * @param string $mysql_pass
	 * @param string $mysql_db
	 * @param string $debug
	 * @param string $encoding
	 */
	function __construct($mysql_host = "", $mysql_user = "", $mysql_pass = "", $mysql_db = "", $debug = "0", $encoding="utf8") {
		# Initialise Variables
		$this->mysql_host = $mysql_host;
		$this->mysql_user = $mysql_user;
		$this->mysql_pass = $mysql_pass;
		$this->mysql_db = $mysql_db;
		$this->encoding = $encoding;
		$this->debug = $debug;
	}

	/**
	 * Connects to the MySQL database and sets up the database handler.
	 *
	 * @return void
	 */
	public function connect() {
		# Create Connection To Database
		if ($this->mysql_host && $this->mysql_user && $this->mysql_pass) {
			$this->link = mysql_connect($this->mysql_host, $this->mysql_user, $this->mysql_pass);
		} else if ($this->mysql_host && $this->mysql_user && !($this->mysql_pass)) {
			$this->link = mysql_connect($this->mysql_host, $this->mysql_user);
		} else if ($this->mysql_host && !($this->mysql_user) && !($this->mysql_pass)) {
			$this->link = mysql_connect($this->mysql_host);
		}
		# Handle any errors
		$this->err_handler(mysql_error());
		# Set Database
		if ($this->mysql_db) {
			mysql_select_db($this->mysql_db, $this->link);
		}
		mysql_query("set names {$this->encoding}");
		# Handle any errors
		$this->err_handler(mysql_error());
	}

	/**
	 * Connects to the database, executes a query, returns the result
	 * if needed, and closes the connection.
	 * @param string $query The SQL query to execute.
	 * @return mysql_result
	 */
	public function query_result($query, $params = null) {
		# Connect To Database
		$this->connect();
		# Execute SQL Command
		if ($params) {
			$query = vsprintf($query, sql_sanitize($params));
		}

		$result = mysql_query($query);
		# Handle Errors
		$this->err_handler(mysql_error());
		//sql log
		$affected = mysql_affected_rows($this->link);
		$error = mysql_error();
		$num_rows = mysql_num_rows($result);
		//sql_log($query, getms($t), $num_rows, $affected, $error);
		# Return Result
		return $result;
	}
	/**
	 * Execute a query for select and return result set as array
	 *
	 * @param string $query
	 * @param string $params
	 * @return void
	 */
	public function query($query, $params = null) {
		$res = $this->query_result($query, $params);
		$array = array();
		while ($row = mysql_fetch_assoc($res)) {
			$array[] = $row;
		}
		mysql_free_result($res);
		return $array;
	}

	/**
	 * Execute a query for insert/update/delete
	 *
	 * @param string $query
	 * @param string $params
	 * @return void
	 */
	public function exec($query, $params) {
		return $this->query_result($query, $params);
	}

	/**
	 * Handles any errors that are generated by MySQL. If $debug is set
	 * to true, then the error will be displayed.
	 * @param mysql_error $err The MySQL Error object.
	 */
	function err_handler($err) {
		if ($err) {
			# Output error
			trigger_error("Mysql DB Error: $err", E_USER_WARNING);
			die();
		}
	}

	/**
	 * Updates the data of a row in a table.
	 * @param string $table The table name to update.
	 * @param array $data An array with the new values.
	 * @param array $id The index of the row to update.
	 */
	function update_table($table, $data, $id) {
		# Construct Update Query
		$query = "UPDATE `$table`";
		$x = 0;
		$params = array();
		foreach($data as $k => $v) {
			if ($x == 0) {
				$query.= "SET ";
				$query.= "`" . $k . "` = '%s' ";
			} else {
				$query.= ", `" . $k . "` = '%s'";
			}
			$x++;
			$params[] = $v;
		}
		$query.= " WHERE `" . $id[0] . "` = '%s'";
		$params[] = $id[1];
		# Execute Query
		$this->query($query, $params);
	}

	/**
	 * Get last update time of table
	 *
	 * @params string $table
	 * @return void
	 **/
	function last_update_time($table) {
		$res = $this->query("SHOW TABLE STATUS LIKE '%s'", array($table));
		return strtotime($res[0]['Update_time']);
	}
}

/**
 * used for escaping strings going into the database,
 * only good for mysql
 *
 * @param string $given
 * @return mixed
 */
function sql_sanitize($given) {
	if (get_magic_quotes_gpc() == 1) {
		$given = is_array($given) ? array_map('sql_stripslashes_array', $given) : stripslashes($given);
	}
	return is_array($given) ? array_map('sql_sanitize', $given) : mysql_real_escape_string($given);
}

/**
 * undocumented function
 *
 * @param string $arr
 * @return void
 */
function sql_stripslashes_array($arr) {
	if (!is_array($arr)) {
		return sql_sanitize($arr);
	}
	$out = array();
	foreach($arr as $key => $val) {
		$out[$key] = (is_array($val)) ? sql_stripslashes_array($val) : sql_sanitize($val);
	}
	return $out;
}
/**
 * Get database object
 *
 * @param string $use_config
 * @return Mysqldb
 */
function mysqldb($use_config = 'default') {
	if (is_array($use_config)) {
		$config = $use_config;
	} else {
		$configs = get_class_vars('DATABASE_CONFIG');
		$config = $configs[$use_config];
	}
	$config = array_merge(array('encoding'=>'utf8'), $config);

	$db = new Mysqldb($config['host'], $config['login'], $config['password'], $config['database'], 1, $config['encoding']);

	return $db;
}
?>